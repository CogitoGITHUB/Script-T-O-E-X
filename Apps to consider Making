


airlo : esim international

# MY NEXT APPLICATIONS

https://play.google.com/store/apps/details?id=com.jernung.writeit.jpn

https://play.google.com/store/apps/details?id=com.jernung.infinite.jpn

https://play.google.com/store/apps/details?id=com.innovativelanguage.innovativelanguage101

https://play.google.com/store/apps/details?id=mobi.eup.jpnews

Buy me a coffee with stripe ( monetization system )

Download again all of them and redo the list with direct links for each and a description after each 

( ANDROID/LINUX/IOS/PWAS )

Make and edge lighting app

make  a library for them and find a way to automate theyre instalation

how to make terminal based software

vimtutor

task ( task list terminal)

Create a buddy Sistema to keep safe if need ( type of social app )

- [ ]  termux
- [ ]  XSCamera ( hidden recording )
- [ ]  Dr wolf chess
- [ ]  Tweet2pic
- [ ]  Autoresponder
- [ ]  Home workout
- [ ]  Screen master ( screenshot tool )
- [ ]  Simple login ( email alias ( combine with proton mail ))
- [ ]  Notica ( save link in notif bar )
- [ ]  AppDrop ( bach unninstaler )
- [ ]  Shelf ( app reviews )
- [ ]  Kyupid ( couples app )
- [ ]  Vived ( dev news )
- [ ]  WIFI Map find internet vpn
- [ ]  Ntfy
    - Put/Post to your phone ( send notifications phone true any script
        
        ![Screenshot_20221221-163735.png](https://s3-us-west-2.amazonaws.com/secure.notion-static.com/f047a59e-ac71-4ac0-9e63-9d6ac5ab46a0/Screenshot_20221221-163735.png)
        
- [ ]  Geonotes
- [ ]  Exif metadata editor
- [ ]  patern identification and numbered objects
- [ ]  MyAnimeList Official
- [ ]  proton mail
- [ ]  devbytes
- [ ]  cryptowatch
- [ ]  RAY ( running app )
- [ ]  ilovepdf
- [ ]  habitnow
- [ ]  passbolt
- [ ]  vivaldi-web browser
- [ ]  musicolet
- [ ]  alarmXtreme
- [ ]  Loom ( screen recording and voice over )
- [ ]  adobe scan
- [ ]  pin
- [ ]  ankidroid
- [ ]  andronix
- [ ]  unity remote 5
- [ ]  airbnb
- [ ]  blank keyboard
- [ ]  binary converter
- [ ]  daily.dev
- [ ]  notion
- [ ]  alarm clock xtreme
- [ ]  aurora store
- [ ]  authorizer
- [ ]  automate
- [ ]  discord
- [ ]  f-droid
- [ ]  f-droid forum
- [ ]  f-droid build status
- [ ]  grammarly
- [ ]  hashnode
- [ ]  hijacker
- [ ]  liferpg
- [ ]  iplogger
- [ ]  linkedin
- [ ]  medium
- [ ]  mimind
- [ ]  macrodroid
- [ ]  nethunter store
- [ ]  hackers keyboard
- [ ]  obsidian
- [ ]  session
- [ ]  ntfy
- [ ]  opensea
- [ ]  quora
- [ ]  tor
- [ ]  telegram
- [ ]  t-ui
- [ ]  uber
- [ ]  voloco
- [ ]  linux command library
- [ ]  personal stuff
- [ ]  rethinkDNS
- [ ]  cSploit
- [ ]  mymonero for android
- [ ]  mental math master
- [ ]  guardians
- [ ]  openvpn for android
- [ ]  OONI probe
- [ ]  mac changer
- [ ]  seterra
- [ ]  quick cursor
- [ ]  phases of the moon
- [ ]  sololearn
- [ ]  harmonic ( hacker news )
- [ ]  rgb to hex
- [ ]  gradient creator
- [ ]  LTE discovery
- [ ]  [shodan.io](http://shodan.io) mobile app
- [ ]  survival manual
- [ ]  wasted ( auto delete data )
- [ ]  time until
- [ ]  touch protector
- [ ]  zonely
- [ ]  WHM
- [ ]  elegant telepromter
- [ ]  fakeStandby
- [ ]  superSU - root checker
- [ ]  drivedroid
- [ ]  LuvDiary
- [ ]  ethical hacking university
- [ ]  pixelKnot
- [ ]  ABrain
- [ ]  AnatomyLearning
- [ ]  Binary converter
- [ ]  braille Academy
- [ ]  Braille Keyboard
- [ ]  braille tutor
- [ ]  brain:code
- [ ]  caesar cipher
- [ ]  car logos
- [ ]  complete ear trainig
- [ ]  complete music trainer
- [ ]  complete rhythm trainer
- [ ]  concentration
- [ ]  converter now
- [ ]  css quiz
- [ ]  javascript quiz
- [ ]  web quiz
- [ ]  sololearn
- [ ]  cube solver
- [ ]  cubeX
- [ ]  datacamp
- [ ]  drops
- [ ]  elements
- [ ]  dotetimer
- [ ]  driving licence practice
- [ ]  differences
- [ ]  enki
- [ ]  fast typing ( make a touch screen and hardware version )
- [ ]  geo guessr
- [ ]  fitness prep
- [ ]  EMS
- [ ]  four-stroke Otto engine
- [ ]  homophones english
- [ ]  geo challenge
- [ ]  funtional ear training
- [ ]  grasshoper
- [ ]  geometry
- [ ]  lip reading
- [ ]  logomania
- [ ]  lockpick101
- [ ]  magnus trainer
- [ ]  magicPL
- [ ]  math tricks
- [ ]  medium
- [ ]  manji
- [ ]  medscape
- [ ]  mental math master
- [ ]  miMind
- [ ]  morse chat
- [ ]  morsemania
- [ ]  music writer
- [ ]  NATO alphabet
- [ ]  perfect ear
- [ ]  periodic table - game
- [ ]  periodic table quiz
- [ ]  picture this
- [ ]  pocket sign
- [ ]  pull ups
- [ ]  push ups
- [ ]  sqads
- [ ]  sit ups
- [ ]  reader pro
- [ ]  quiz world
- [ ]  speaking timer stop watch ( add in everithing )
- [ ]  write japanese
- [ ]  world map quiz
- [ ]  tutorial for rubiks cube
- [ ]  skilled trades
- [ ]  reaction time
- [ ]  vocal image
- [ ]  rubiks cube
- [ ]  zonely
- [ ]  Quick cursor
- [ ]  Net speed indicator
- [ ]  Touch protector
- [ ]  Steam
- [ ]  Weather & Radar
- [ ]  Chess clock
- [ ]  chess.com
- [ ]  https://play.google.com/store/apps/details?id=com.proto.circuitsimulator
- THE APP
    
    
    Teamed galaxy 
    
    https://devdojo.com/colocodes/using-notion-to-organise-programming-topics
    
    [PLAYING CARDS (1)](https://www.notion.so/PLAYING-CARDS-1-67023629a2e345a9999daf11daa20cea?pvs=21)
    
    style : 
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    
    <link href="https://fonts.googleapis.com/css2?family=Italianno&display=swap" rel="stylesheet">
    
    https://rubenscheedler.hashnode.dev/8-tips-for-learning-at-light-speed
    
    https://github.com/lockfale/osint-framework
    
    # Mind map
    
    https://www.hashmicro.com/blog/get-to-know-mind-map-definition-types-and-benefits/
    
    https://untools.co/
    
    [PAGE ARANGEMENT (1)](https://www.notion.so/PAGE-ARANGEMENT-1-64395d573c9444d68bb74fd49897e0f5?pvs=21)
    
    IMPLEMENT TOUCH TYPING INTO COURSES
    
    NFTS OF YOU IN YOUR PROFILE … ADVANCE REPUTATION .. WHEN YOU DIE .. THEY CAN BE SOLD AND THE MONEY GO WHERE YOU WANT 
    
    if you have a lot to show .. make a selector of how much the user wants to show like if you have collums make a selector of how many ( 10-50-100 )
    
    https://sourceforge.net/about
    
    Inside de page of the mind map ad description and then minp in a downword facind position 
    
    The first dot of the mind map it will be a spinning spiral
    
    https://www.codingame.com/start
    
    make full videos put them on top of the mind map and add time stambs on them maind map in sincronization with the videos 
    
    create bite sized videos to be easely searcheble on youtube and the web of those complete videos
    
      
    
    Use hasnode and medium for promotion
    
    create templates as examples and use coments to explain
    
    create exercises with keyboard shortcuts
    
    Use colors to show the level of the hacker inside the learning process 
    

create  A PAYLOAD remover with the cost of an one time add 

use white for default info, red for pentesting, blue for cyber sec, purple underline for purple hacking .. green for nomies and so on

- Macros: How To Turn Your Keyboard Into a Password Factor
    
    My keyboard is everything to me. Like many growing up over the past 2 
    decades, time at the computer became a measure of existence within the 
    digital world. From playing the hero in an adventure game, writing 
    security programs and tooling to defend against the next dark cyber 
    criminals, turning beats into a melody and more, when not in nature or 
    in the workshop, easily over 12 hours a day are spent at a keyboard.
    
    For
     some, a keyboard is a keyboard. For me, it’s my castle. Every keystroke
     is deliberately calculated in smooth combinations of finger movements 
    like figure skaters pushing themselves harder and harder. Everything 
    from the body, switches and keycaps are customized. Using [QMK](https://qmk.fm/),
     an open-source keyboard firmware, I’m able to tweak and customize just 
    about every aspect of my keyboard exactly how I need it. You can apply 
    layers using modifier keys, meaning pressing `Shift + J` and `Ctrl + J` yield two different key combinations, without needing to run additional software on your computer.
    
    Like
     a well balanced hammer, my keyboard teeters the line between striking 
    blows building the foundation of the future through code, and being the 
    first line in defense against adversaries. In order to do that, I 
    changes how I perceived my keyboard. I treat it like my digital 
    passport. Those who have them, treat their YubiKey’s like digital 
    passports, and at the end of the day, regardless of the cryptographic 
    strength inside, having physical access to it is everything. I applied 
    the same concept to my keyboard. Using a
    modified version of the [Leader Key concept](https://thomasbaart.nl/2018/12/20/qmk-basics-leader-key/),
     my passphrase and pin code macros are locked until unlocked. I might do
     a separate article on this if there is interest, but it essentially is a
     leader key sequence that activates a boolean variable. If it’s true, it
     will `send_string_with_delay` and will time out after 5 minutes using a timer.
    
    # Adding A Secrets’ Macro
    
    I won’t go into the details of a keymap for QMK, if you’re unfamiliar, take a look at their GitHub [README](https://github.com/qmk/qmk_firmware/blob/master/docs/keymap.md) on it. Instead, we will focus on how to extend a keymap to add a custom key code.
    
    Starting with the header files, we are going to create 2 new key codes, I called them E_PIN and E_PHRASE
    
    > keymap.h
    > 
    
    ```
    #include QMK_KEYBOARD_H#include <print.h>
    #include <string.h>enum alt_keycodes {
      U_T_AUTO = SAFE_RANGE, //USB Extra Port Toggle Auto Detect / Always Active
      U_T_AGCR,              //USB Toggle Automatic GCR control
      DBG_TOG,               //DEBUG Toggle On / Off
      DBG_MTRX,              //DEBUG Toggle Matrix Prints
      DBG_KBD,               //DEBUG Toggle Keyboard Prints
      DBG_MOU,               //DEBUG Toggle Mouse Prints
      MD_BOOT,               //Restart into bootloader after hold timeout
      CHNG_MD,               //
      TERMINAL,              //
    };enum string_secret_keycodes {
      // The start of this enum should always be equal to end of alt_keycodes + 1
      E_PIN = TERMINAL + 1, // PIN
      E_PHRASE,             // PHRASE
    };
    ```
    
    These
     two new key codes are simply placeholders of an offset which can be 
    registered and have events mapped to. If we never add them to the keymap
     matrix, they exist rent free in the firmware for all but a few bits.
    
    Next, we are going to move onto defining the values of our phrase and pin code within `keymap.c`.
    
    > keymap.c
    > 
    
    ```
    #define SECRET_PIN "8675309"
    #define SECRET_PHRASE "YOURMOM"static const char * cmds[] = {
        SECRET_PIN,
        SECRET_PHARSE,
    };
    ```
    
    Also within this file, we need to add an event check within `process_record_user`
     which detects when a key was pressed or raised. Using the enum values 
    we assigned in the header, we will check for the range of our secret key
     codes. We also use the offset of the pressed key code subtracted from 
    the secret macros key codes to get the index value from within the cmd 
    array. This is the only math that mattered to me in high school.
    
    ```
    case E_PIN ... E_PHRASE:
        if (record->event.pressed) {
            send_string_with_delay(cmds[keycode - E_PIN], 1);
            register_code(KC_ENT);
            unregister_code(KC_ENT);
        }
        break;
    ```
    
    You may have also caught on to where I added an extra `Enter` after the shortcut was pressed to auto-submit the value, and saves an additional manual keystroke.
    
    When we put it all together, our `keymap.c` file starts to look a little something like this:
    
    # Keeping The Secrets Safe
    
    If you’re like me, you have your own .[dotfiles](https://github.com/mikemackintosh/dotfiles)
     repository and keep all your configurations there for every new system 
    you log into. It’s a great practice, and reduces the need to manually 
    copy configurations. However, let’s say you want to store your cool new 
    password QMK changes without committing them to your repository. There 
    is a solution for that as well!
    
    The `__has_include`
     operator is a compile check for if the included resource is available 
    or not. If it is, it will execute the inner instructions. Otherwise, it 
    will skip. What this allows us to do is isolate our secrets in a `secrets.h` file, which would be added to your `.gitignore`.
    
    Read more about `__has_include` below:
    
    [**__has_include (The C Preprocessor)4.2.10 __has_include The special operator __has_include (operand) may be used in ‘#if’ and ‘#elif’ expressions to test…**
    gcc.gnu.org](https://gcc.gnu.org/onlinedocs/cpp/_005f_005fhas_005finclude.html)
    
    To do this, we would add the header file check into our `keymap.c` and set default values for the `SECRET_PIN` and `SECRET_PHRASE` in the event a `secrets.h` file is not present, allowing it to successfully compile.
    
    ```
    #if __has_include("secrets.h")
    # include "secrets.h"
    #endif#ifndef SECRET_PIN
      #define SECRET_PIN "ok"
    #endif#ifndef SECRET_PHARSE
      #define SECRET_PHARSE "ok"
    #endif
    ```
    
    > secrets.h
    > 
    
    ```
    #define SECRET_PIN "8675309"
    #define SECRET_PHARSE "YOURM"
    ```
    
    > .gitignore
    > 
    
    ```
    secrets.h
    ```
    
    I also came to the realization that I do not like sentences that start with a capital B.
    
    - -
- read
