#+TITLE: Failproof Emacs Workflow for Cybersecurity Ops
#+AUTHOR: AeonCoreOS Architect
#+DATE: <2025-05-11>
#+OPTIONS: toc:nil

* Overview
This file defines the complete interface-resilience strategy for running Emacs + EXWM as your primary hacking hub, while keeping all critical processes OS-side and fail-safe.

** Stack Philosophy
- Emacs/EXWM: Interface, orchestration, buffer management, logic.
- Guix System: Backend daemon runner, security zone, scheduler.
- VTerm/ST: Terminal bridge & fallback escape hatch.
- Systemd or Shepherd: For watchdogs and persistent services.

* Fail-Safe System Structure

** Emacs Watchdog (Restart on Crash)
#+BEGIN_SRC bash :tangle ~/.config/systemd/user/emacs-watchdog.sh
#!/bin/sh
if ! emacsclient --eval "(+ 1 1)" >/dev/null 2>&1; then
  echo "[!] Emacs crashed at $(date)" >> ~/.emacs-crash.log
  setsid emacs &
fi
#+END_SRC

- Schedule with cron, `systemd --user`, or a shell loop.

** System Load Alert Script
#+BEGIN_SRC bash :tangle ~/bin/emacs-load-guard.sh
#!/bin/bash
MAX_LOAD=4.0
CURRENT_LOAD=$(cut -d " " -f1 /proc/loadavg)

if (( $(echo "$CURRENT_LOAD > $MAX_LOAD" | bc -l) )); then
  notify-send "System Load High" "You’ve summoned too many demons. Cease."
  pkill -SIGSTOP emacs
  sleep 10
  pkill -SIGCONT emacs
fi
#+END_SRC

- Add as cron job or watch with a system daemon.

* Emacs Buffer Management

** Buffer Limit Guard
#+BEGIN_SRC emacs-lisp
(defun my-buffer-limit-guard ()
  (let ((buffer-limit 12))
    (when (> (length (buffer-list)) buffer-limit)
      (message "[!] Buffer limit exceeded. Auto-clean triggered.")
      (my-auto-clean-buffers))))

(defun my-auto-clean-buffers ()
  (dolist (buf (buffer-list))
    (when (and (not (eq buf (current-buffer)))
               (not (buffer-modified-p buf))
               (not (string-match-p "^\\*" (buffer-name buf))))
      (kill-buffer buf))))

(run-with-timer 0 30 #'my-buffer-limit-guard)
#+END_SRC

* VTerm Controlled Execution

** Run Scans with Elisp (Not TTY-blocking)
#+BEGIN_SRC emacs-lisp
(defun my-vterm-nmap-scan ()
  (interactive)
  (vterm)
  (vterm-send-string "nmap -sS 10.0.0.1\n"))
#+END_SRC

* Auto-Recovery Logic

** Auto-Restart Emacs Daemon on Boot (systemd)
#+BEGIN_SRC conf :tangle ~/.config/systemd/user/emacs.service
[Unit]
Description=Emacs Daemon
After=network.target

[Service]
Type=forking
ExecStart=/gnu/store/.../bin/emacs --daemon
Restart=always

[Install]
WantedBy=default.target
#+END_SRC

** Buffer Session Logging (Optional)
- Log active buffers and time every hour.
#+BEGIN_SRC emacs-lisp
(run-at-time "00:59" 3600
             (lambda ()
               (with-temp-buffer
                 (insert (format-time-string "* %Y-%m-%d %H:%M\n"))
                 (dolist (buf (buffer-list))
                   (insert (format "- %s\n" (buffer-name buf))))
                 (append-to-file (point-min) (point-max) "~/org/buffer-log.org"))))
#+END_SRC

* Fallback Terminals

** ST or TTY Interface
- Always available as root fallback.
- Use to launch new Emacs sessions or kill hung ones:
#+BEGIN_SRC shell
pkill -f emacs
emacs --daemon
emacsclient -c
#+END_SRC

* Optional: Visual Alerts

** Notifications via Dunst
#+BEGIN_SRC shell
notify-send "Alert" "Buffer overflow. Trim your tabs!"
#+END_SRC

* Final Advice
- Emacs isn't your OS. It's your /bridge/.
- EXWM is glass. Your system is steel. Design accordingly.
- Each module should function without Emacs; Emacs simply orchestrates.

#+BEGIN_QUOTE
"If Emacs fails, the ops don't stop. They flow from the daemon, from the logs, from the buffers waiting to be reborn."  
—CyberShifter Notes, Vol. I
#+END_QUOTE
