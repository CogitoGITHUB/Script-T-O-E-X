#+TITLE: Org Secrets: Mastering `hide-lines` for Emacs
#+AUTHOR: The Shapeshifter
#+OPTIONS: toc:nil num:nil

* Introduction

Welcome, seeker of structure in chaos.

In this tome of Emacs sorcery, we unravel the mystery of ~hide-lines~—
a humble yet potent tool to tame the infinite scrolls of logs, notes, code, and more.

* The Basics: hide-lines

~hide-lines~ allows you to hide lines in any buffer that *match* or *do not match* a regular expression.

** Commands

- =M-x hide-lines=: Hide lines that match a regexp.
- =C-u M-x hide-lines=: Hide lines that *do not* match a regexp.
- =M-x hide-lines-show-all=: Reveal all hidden lines.
- =M-x hide-lines-kill-hidden=: Delete all hidden lines (use with care!).

* Keybindings (Optional)

#+begin_src emacs-lisp
(global-set-key (kbd "C-c h") 'hide-lines)
(global-set-key (kbd "C-c H") 'hide-lines-show-all)
#+end_src

* Amplifying hide-lines: Org Black Magic

** 1. Org Mode Integration

You can use ~hide-lines~ in Org buffers to quickly zero in on TODOs, tags, deadlines, etc.

#+begin_src emacs-lisp
(defun my/hide-org-done ()
  "Hide all DONE headlines in current Org buffer."
  (interactive)
  (hide-lines-matching "^\\*+ DONE "))
#+end_src

** 2. Log Analysis & Filtering

Set up quick filters for logs (especially useful for org-noters, logs, etc):

#+begin_src emacs-lisp
(defun my/hide-lines-not-matching-log-level (level)
  "Show only lines matching a log LEVEL (e.g., INFO, ERROR, WARN)."
  (interactive "sLog Level: ")
  (hide-lines-not-matching level))
#+end_src

** 3. Use `org-ql` or `consult-org-heading` First

Combine `hide-lines` with query tools:

- Use `org-ql` to search headlines and narrow your focus.
- Then use `hide-lines` to hide the noise below.

** 4. Use Presets with `use-package` Hydra

#+begin_src emacs-lisp
(defhydra hydra-hide-lines (:color pink :hint nil)
  "
^Filter Lines^
^^^^^^^^-------------------------------
_h_ Hide matching      _n_ Hide NOT matching
_s_ Show all           _k_ Kill hidden
"
  ("h" hide-lines)
  ("n" (lambda () (interactive) (hide-lines t)))
  ("s" hide-lines-show-all)
  ("k" hide-lines-kill-hidden)
  ("q" nil "quit"))

(global-set-key (kbd "C-c C-h") 'hydra-hide-lines/body)
#+end_src

** 5. Combine with Narrowing

After using `hide-lines`, you can further narrow:

#+begin_src emacs-lisp
(defun my/narrow-to-visible-lines ()
  "Narrow buffer to visible lines only."
  (interactive)
  (let ((inhibit-read-only t))
    (flush-lines ".*\\n\*" (point-min) (point-max) nil t)))
#+end_src

⚠️ Use this only if you want to *permanently* narrow to what's visible.

* Bonus: Visual Stealth Mode

Use `olivetti-mode`, `writeroom-mode`, or similar visual enhancements to focus your view once you’ve filtered with `hide-lines`.

#+begin_src emacs-lisp
(use-package olivetti
  :hook (org-mode . olivetti-mode))
#+end_src

* Final Words

`hide-lines` is a scalpel—quiet, subtle, and precise.

In a world of bloated UIs and infinite scrolling, *you*, dear hacker, now possess a blade of invisibility. Use it well.

*Secrets are meant to be hidden. But some secrets... are hidden to be found.*